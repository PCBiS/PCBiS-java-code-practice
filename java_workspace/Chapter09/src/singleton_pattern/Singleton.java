package singleton_pattern;
/* 
 * 싱글톤 패턴으로 코딩해야 하는 경우
 * 클래스가 기능만 있는 경우 - 내부에 변수값등이 있으면 안됨.
 * 값을 받아서 값을 출력해주는 함수등을 짤 때 위와 같이 코딩함.
 * 
 * 싱글톤 패턴을 사용하는 이유 
 * 	- 고정된 메모리 영역(이미 사전에 불러놓은 영역)을 사용하도록 단 한번 new 연산자로
 *    인스턴스를 얻어오기 때문에 메모리 낭비를 줄일 수 있다.
 *  - 전역변수로 선언되고 전역메소드로 호출하기 때문에 다른 클래스에서도 사용할 수 있다.
 *  - 공통된 객체를 사용해야 하는 코딩에서 매번 객체를 생성하지 않고 기존에 생성한 객체를
 *    재사용하기 때문에 성능면에서 유리하다.
 * 
 * 핵심사항 1. 싱글톤으로 짜는 경우는 어디서 이 클래스를 불러오더라도 
 * 				메모리상 참조주소는	미리 생성된(new) 자기 자신뿐임.
 * 
 * 			2. 싱글톤의 약점은 멀티스레드 프로그래밍 환경에서 위험하다.
 * 				메모리상 참조로 가르키는 메소드는 단 하나뿐이기 때문에
 * 				만약 싱글톤 변수 내에 내부 변수가 있으면 다수의 사용자가
 * 				싱글톤 하나에 몰렸을 때 같은 내부변수값을 보게 될 것이다.
 * 				 				
 */
public class Singleton {
	// 1. 생성자의 접근 제어지시자 : private 처리 한다 -> 인스턴스 생성 불가능.
	private void Singleton() {} // 생성자를 private 처리. -> 외부에서 볼 수 없음.

	// 2. 공유를 할 객체를 생성한다.
	private static Singleton s = new Singleton(); 
	/* 
	 * 결과값을 공유할 객체 s를 생성하여 getInstance를 호출했을 때 리턴되는 값은
	 * 자기 자신 하나뿐이다.
	 */

	/* 
	 * 3. 참조 값을 반환하는 메소드를 생성하자.
	 *    이유 : 1에서 인스턴스 생성을 못하게 막았으니
	 *    		 미리 생성된 자기 자신(이 예제코드에선 print())을 반환 할 수 있도록
	 *    		 getInstance() 메소드를 정의 해 놓음.
	 */
	public static Singleton getInstance() {
		return s; // 위에서 미리 생성해둔 객체를 리턴한다.
	}
	
	public void print() {
		System.out.println("Singleton Method");
	}
}