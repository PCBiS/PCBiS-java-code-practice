20200410 노트

연산자(Operator)
 - 어떠한 기능을 수행하는 기호 (+, -, *, / 등등..)
 - 연산자를 사용하는 목적은 data를 변형 하기 위하여.
 
피연산자(Operand)
 - 연산자의 작업 대상 (변수, 상수
 

연산자의 종류

	단항연산자 -연산하는 항목이 하나일떄 그 값을 변형하기 위해 쓰는 연산자.
	
	산술연산자
	비교연산자 instanceof(객체 -> 상속 때 사용)
	논리연산자 - 집합의 개념과 비슷함. 
				&, ^, | 은 비트에 대한 연산자
				&&, || 는 true, false
	
	삼항연산자
	
	대입연산자 - 제일 마지막에 수행되는 연산.
	
연산자의 순위
	- 괄호는 소괄호 뿐, 그리고 괄호가 최우선순위 연산자.                                                                        
	- 산술 > 비교 > 논리 > 대입
	- 단항 > 이항 > 삼항
	- 단항, 대입연산자 만 <- 방향, 나머지 연산자들은 -> 방향.
	
	ex) a+b > b+c 의 경우는 a+b 의 결과와 b+c의 산술연산 결과를 먼저 구한 후 그 뒤 비교연산을 수행.
	ex2) a=b=3 은 b = 3 -> a = b 순서이다.
	ex3) 7 + 1 - 5는 (7 + 1) - 5 와 사실상 동일.
	ex4) -x + 3 은 단항 연산 우선 수행	
	
	
자바에서 제공하는 이항연산자

	우선연산
	- '*' 두 피연산자의 값을 곱한다
	- '/' 왼쪽의 피연산자 값을 오른쪽의 피연산자의 값으로 나눈다.
	- '/' 왼쪽의 피연산자 값을 오른쪽의 피연산자의 값으로 나눴을 때의 나머지의 값을 반환한다.
	차선연산
	- '+' 두 연산자의 값을 더한다.
	- '-' 왼쪽의 피연산자의 값을 오른쪽의 피연산자의 값으로 뺀다
	최후연산
	- '=' 연산자 오른쪽의 값을 왼쪽에 있는 변수에 대입한다.

관계(비교)연산자
	- 피연산자를 같은 타입으로 변환한 후에 비교한다.
	- 돌아오는 결과값은 true or false 뿐.
	- 기본형(boolean 제외)과 참조형에 사용 할 수 있으나, 참조형에는 ==, != 만 사용가능하다.
	- char 타입은 비교연산시 integer 타입으로 변환되어 비교 한다 (ex) 'a' < 'b' => 65 < 66 -> true)
	

이항연산자 특징
	- 이항연산자는 연산을 수행하기 전에 피연산자의 type을 일치시킨다. 무조건 큰 쪽으로...
	- byte, short는 연산시 integer로 변해버림.
	- byte + short -> int + int = int
	- char + int -> int + int = int
	- float + int -> float + float = float
	- long + float -> float + float = float
	- float + double -> double + double = double
	- char c2 = ++c1; 단항연산중 증가연산일 때만 c1==65 + 1의 결과값인 유니코드 66을 c2에 대입된다.
	
	ex : byte a = 10, b = 20;
		 byte c = a+b;
		 
		 byte c = (byte)a+b; - 에러임. 이유는 a(byte) + b(int) = c(int) -> c는 byte 형 변수임으로 치환 불가능.
		 byte c = (byte)(a+b); - 정상임. 이유는 a(int)+b(int) = byte(c(int))로 치환 한 결과값인 c(byte)로 저장하기 때문에 가능.
		 
	
	