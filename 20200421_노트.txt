2차원 배열

	- 2차원 배열은 2차원의 구조를 갖는 배열이다.
	- 기본적으로는 수평축에 수직축이 더해진 구조물을 상상하면 편하지만
	- 자바에서는 1차원 배열의 집합으로 보면 편하다.
		ex) int[][] scoreList = {{1,77,81,64},{2,66,71,89},{3,86,91,98}}; == int[2][3] scoreList;
		
		2차원 배열에 엑세스 하려면 for문이 2개 필요하다.
		ex) for (i = 0, i = scoreList.length, i++){
				for (j = 0, j = scoreList.length, j++){
					System.out.println(scoreList[i][j]); // scoreList의 i행 j열의 참조변수 내부의 값을 출력.
				}
			}

for - each문
	
	int e : 배열 array 의 모든 요소가 int형 자료이고 그 각각의 요소가 e라고 칭한다.
	array : 배열 전체가 반복의 대상이다.
	for(int e : array){
		System.out.print(e + " "); // e가 의미하는 각각의 요소 값을 하나씩 출력한다.
	]
	
	배열의 원본요소를 변경 시킬 수는 없으나 참조값은 변경 가능하다.		
	그냥 for문을 사용하여도 문제 없으며, 다만 취업처마다 코딩스타일이 다름.
	
	
	
제어자(modifier)

	-클래스, 변수, 메소드의 선언부에 사용되어 부가적 의미를 부여.
	
	-제어자의 종류
	
		접근제어자 - Public : 선언하는 클래스에 대해서 접근 제한이 없음.
							  다시 풀어서 말하면 어디서든 이 클래스를 알고있다면 부를 수 있다.
						      - 같은 클래스(물리적 파일 단위), 같은 패키지(물리적 폴더 단위), 자손 클래스(상속받은 경우), 전체(패키지 외부에서도)
					 
					 Protected : 동일한 패키지 내에 존재하거나 파생 클래스에서만 접근 가능.
							     - 같은 클래스(물리적 파일 단위), 같은 패키지(물리적 폴더 단위), 자손 클래스(상속받은 경우)
					 
					 Default(접근제어자 기술 생략) : 동일 패키지 내부에서만 접근 가능
							    - 같은 클래스(물리적 파일 단위), 같은 패키지(물리적 폴더 단위)
					 
					 Private : 자기 자신의 클래스 내부에서만 접근이 가능함.
							    - 같은 클래스(물리적 파일 단위)
					 
					 
			제어자 - static : 멤버변수, 메소드, 초기화 블럭앞에 사용 가능. 
							  멤버변수에 사용시 모든 인스턴스가 공통으로 사용하는 클래스 변수가 된다.
							  인스턴스 생성의 필요성이 사라지며 클래스가 메모리에 로드 될 때 생성된다.
							  메소드에 사용시 인스턴스를 생성 (Instance in = new Instance();)하지 않고도 사용 가능하다.
							  
					 final : 클래스, 메소드, 멤버변수, 지역변수에 사용이 가능.
							 클래스에 사용 시 확장이 불가(extended)해지며 다른 클래스의 조상이 될 수 없다.
							 메소드에 사용 시 오버라이딩을 통해 원하는 방식으로 재정의해서 기능을 사용할 수 없다.
							 변수에 사용 시 오버라이딩[Ex : final int num = 10 -> num = 11(X)]이 불가능하다.
					 
					 abstract : 클래스, 메소드에 사용 가능, 상속을 하여 기능을 완성하기 위한 목적으로 사용한다.
								클래스 내에 사용 시 추상 메소드가 있음을 의미한다.
								메소드에 사용 시 선언부만 사용했고 구체적인 기능은 작성 안된 추상 메소드임을 알린다.
					 -----------
					 native : 자바가 아닌 언어로 구현 한 후 자바에서 사용하려고 할 때 이용하는 키워드이다.
							  대부분 자바 언어 특성상 구현하기 힘든 구조를 다른 언어로 구현한 뒤 사용하고자 할 때 쓴다.
					 
					 transient : 보안정보들(ex : 패스워드, 주민번호, 등등의 민감한 정보)를 
								  Serialize 하는 과정에서 제외하고자 할 때 선언하는 키워드.
								  선언 시에는 해당 부분이 값이 누락된다. (null)
		  부가지식 - Serialize : 자바시스템 내부에서 사용되는 객체 or 데이터를 외부의 자바시스템에서도 사용 할 수있는
			  					 바이트(byte) 형태로 데이터 변환 / 변환된 데이터를 다시 객체 or 데이터로 다시 변환하는 기술의 총칭.
															
					 
					 synchronized : 멀티스레드 프로그래밍에서 스레드 간 동기화 신뢰성을 확보하기 위해서 
									한개의 스레드가 특정 자원에 접근중일 때(ex. 은행에서의 현금 트랜잭션 행위)
									다른 스레드에서 특정 자원에 대해 경합하는 현상을 막아서 신뢰성을 확보하는 방법.
					 volatile : 변수를 Main Memory에 저장하겠다는걸 명시하는 행위, 이렇게 할 경우 멀티스레드 환경에서는
								스레드가 변수의 값을 읽어올 때, 각각의 CPU의 Cache 영역에서 변수에 지정 된 값이 각각
								달라지기 때문에 '변수 값 불일치 현상'이 발생하게 된다.
								
					 scriptfp : 플랫폼 간(JVM 머신이 설치 된 기기)차이를 무시하고 자바 언어에서 허용하는 정밀도 범주내에서
								엄격하게 부동소수점 연산 정밀도를 보장하도록 제한 하는 것.
								만약 이를 막지 않는다면 플랫폼의 성능에 따라서 float이나 double의 정밀도가 달라져서 Overflow가 발생 할 수 있다.