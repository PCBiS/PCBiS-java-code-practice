상속
	- 기존에 정의 된 클래스에 메소드 or 변수를 추가하여 새로운 클래스로 정의 하는 것
	ex ) public void 70000WonChicken extended Chicken(int money){}
		기존에 치킨이라고 정의된 클래스에 메소드와 변수를 새로 정의하여 7만원짜리 치킨으로 뻥튀기
		
	- 두 클래스를 조상과 자손으로 관계를 맺어주는 것.
	- 자손은 조상의 모든 멤버를 상속받는다.
		단 제외되는 것들 : 생성자(따로 구성해줘야 함.)
						 - 조상의 생성자가 필요하면 조상의 것을 별도로 호출(super(매개변수, 인자))해야 함.
							
						   초기화 블럭
		--------------------------------------------------------------------------------------------------
		   
		공통된 부분은 조상격에서 관리하고 개별적으로 변경된 기능들은 자손에서 관리해야 한다.
		   
	- 자손의 멤버 개수는 조상보다 적을 수 없다. 
		당연 한 것. 조상것을 상속받아서 추가되면 모를까 기존에 있는걸 제외할 수는 없다.
		선택적으로 상속 받을 수 없다. 그렇기에 조상격 설계가 처음부터 사려깊게 설계될 필요성이 있음.
		그렇기에 어떤것들을 조상클래스에서 정의 할 것이고, 어떤것들을 자손클래스에서 구현 할 지 생각해야 함.
	
	

상속의 이유
	
	- 코드의 일관성 : 기존에 작성 된 클래스를 기준으로 공통된 규약을 정의하고 적용하기 위함.
	

상속을 할 때 고려해야 할 점

	- 상속관계에 있는 두 클래스 간에는 is a 관계가 성립되어야 한다.
	  is a 관계가 성립하지 않는 경우에는 상속의 타당성을 고민해봐야 한다.
		ex ) 전화기 ->  유선전화기 
						무선전화기 -> 스마트폰						
	  
	- has a 관계도 상속으로 표현은 가능하다. 
		has a 관계의 특징은 꼭 특정 물건을 소유했다고 그것이 상위개체의 고유한 속성인 것은 아니다.
				(경찰만이 총을 가지고 수갑을 가진게 아닐 수도 있듯이.)
		ex ) 경찰의 소유물
				- 총
				- 수갑
				- 신분증
				- 스마트폰

오버라이딩
	- 조상클래스에서 상속받은 메소드의 내용을 상속받는 클래스에 맞게 변경하는 것.
	  ex ) class Chicken (
			int cPrice = 10000;
				String sellChicken(){
					return cPrice;
				}					
			)
			
			class 70000WonChicken extends Chicken{
				int sPrice = 7;
				String sellChicken(){
					return cPrice * sPrice;
				}					
			}
	- 상위클래스에서 정의 된 메소드의 이름, 반환형, 매개변수선언까지 
	  완전히 동일한 메소드를 하위클래스에서 위와 같이 다시 정의 하는 것.
	  
	- 하위클래스에서 정의된 메소드가 상위 클래스의 메소드를 숨기고 자기 자신만 보이게 한다.
		
	- 조건 : 1. 선언부가 같아야 한다. (이름, 매개변수, 리턴타입)
			 2. 접근제어자를 좁은 범위로 변경할 수는 없다.
				(ex : 조상 메소드가 protected 라면 private 로는 불가하고 반대로 protected 나 public으로는 가능)
			 3. 조상클래스보다 더 많은 예외를 선언 할 수는 없다.
			 
	
	

		
